// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  name            String?
  email           String @unique @db.VarChar(100)
  password        String @db.VarChar(100)

  role            Role  @default(USER)

  addresses       Address[]
  orderItems      OrderItems[] 
  orders          Order[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime? @db.Timestamptz(6)
  @@map("users")
}

model Address {
  id        String @id @default(uuid())
  name      String
  phone     String
  street    String
  city      String
  state     String
  zip       String
  
  userId    String
  user      User @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamptz(6)
  @@map("addresses")
}


model Product {
  id    String @id @default(uuid())
  name  String
  price Float
  stock Int

  orderItems         OrderItems[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamptz(6)
  @@map("products")
}

model Order {
  id             String    @id @default(uuid())
  transactionId  String    @unique
  amount         Float
  status         OrderStatus

  userId         String
  user           User      @relation(fields: [userId], references: [id])

  orderItems     OrderItems[]   @relation("OrderToItems")

  payment        Payment?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @db.Timestamptz(6)

  @@map("orders")
}

model OrderItems {
  id             String    @id @default(uuid())
  productName    String
  quantity       Int
  amount         Float
  status         OrderItemStatus

  userId         String
  user           User      @relation(fields: [userId], references: [id])

  productId      String
  product        Product   @relation(fields: [productId], references: [id])

  orderId        String?
  order          Order?    @relation("OrderToItems", fields: [orderId], references: [id])

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @db.Timestamptz(6)
  @@map("order_items")
}

model Payment {
  id              String   @id @default(uuid())

  orderId         String   @unique
  order           Order    @relation(fields: [orderId], references: [id])

  transactionId   String   @unique
  status          String

  snapToken       String
  snapRedirectUrl String

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? @db.Timestamptz(6)

  @@map("payments")
}

enum Role{
  USER
  ADMIN
}

enum OrderStatus{
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum OrderItemStatus{
  IN_CART
  PENDING
  PAID
  CANCELLED
}