// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  name  String?
  email String @unique @db.VarChar(100)
  password String @db.VarChar(100)

  role Role  @default(USER)

  addresses Address[]
  orders Order[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamptz(6)
  @@map("users")
}

model Address {
  id        String @id @default(uuid())
  name      String
  phone     String
  street    String
  city      String
  state     String
  zip       String
  
  userId    String
  user   User @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamptz(6)
  @@map("addresses")
}


model Product {
  id    String @id @default(uuid())
  name  String
  price Float
  stock Int

  orders   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamptz(6)
  @@map("products")
}

model Transaction {
  id             String    @id @default(uuid())
  transactionId  String    @unique
  amount         Float
  status         String

  userId         String
  user           User      @relation(fields: [userId], references: [id])

  orders         Order[]   @relation("TransactionOrders")  // Relasi 1-N dengan Order

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @db.Timestamptz(6)

  @@map("transactions")
}

model Order {
  id             String    @id @default(uuid())
  productName    String
  quantity       Int
  amount         Float
  status         String

  userId         String
  user           User      @relation(fields: [userId], references: [id])

  productId      String
  product        Product   @relation(fields: [productId], references: [id])

  transactionId  String?
  transaction    Transaction? @relation("TransactionOrders", fields: [transactionId], references: [id])  // Relasi ke Transaction bersifat optional

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @db.Timestamptz(6)
  @@map("orders")
}

enum Role{
  USER
  ADMIN
}